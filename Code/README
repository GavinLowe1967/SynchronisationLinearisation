Overview of code, categorised by subdirectory. 

SynchronisationTesting
======================

Synchronisation testing architecture.  (Class files in package
synchronisationTesting.)

- Log.scala: raw polymorphic log

- HistoryLog.scala: log for logging call and return of operation invocations.

- ThreadUtil.scala: thread utilities.

- Tester.scala: base class of all testers.

- BinaryTester.scala: base class of all binary testers.  Actually just the
stateless ones.

- FordFulkerson.scala: implementation of the Ford Fulkerson algorithm.  Used in
BinaryStatelessTester.

- BinaryStatelessTester.scala: tester for the binary, stateless, heterogeneous
case.  Uses Ford-Fulkerson to find matching.  

- DFS.scala: heuristic-based depth-first search for the binary, stateless,
homogeneous case.

- HomogeneousBinaryStatelessTester.scala: tester for the binary, stateless,
homogeneous case.  Performs heuristic-guided DFS to find matching. 

- BinaryStatefulTester: tester for the binary, stateful case.  Performs DFS
(specialisation of that for the StatefulTester).

- StatelessTester: tester for the general stateless case.

- StatefulTester: tester for the general stateful case.  Performs DFS.

- TwoStepLinSpec: implementation of two-step linearisation testing. 


SynchronisationObjects
======================

Synchronisation objects.  (Class files in package synchronisationObject.)

Semaphore.scala: implemenation of semaphore; supporting code, only. 

Chan.scala: synchronous channels; binary, heterogeneous, stateless.

ChanCounter.scala: channel with sequence number; binary, heterogeneous,
stateful.

TimeoutChannel: channel with timeouts; non-binary with multiple modes,
heterogeneous, stateless.

FilterChan.scala: filtering channel; binary, heterogeneous, stateless.

MenWomen.scala: the men and women problem; binary, heterogeneous, stateless.

Exchanger.scala: allows two threads to exchange values; binary, homogeneous,
stateless.

TimeoutExchanger: also allows timeouts.  Multiple modes. 

TwoFamilies.scala: the speed-dating problem; binary, heterogeneous, stateful.

OneFamily.scala: a one-family version of the speed-dating problem; binary,
homogeneous, stateful.

ABC.scala: the ABC problem; non-binary, heterogeneous, stateless.

ABCCounter.scala: ABC extended with a counter. non-binary, heterogeneous,
stateful.

Barrier.scala: a barrier synchronisation; non-binary, homogeneous, stateless.

BarrierCounter: a barrier synchronisation with a sequence number; non-binary,
homogeneous, stateful.

TerminatingQueue: a terminating queue; non-binary with multiple modes,
heterogeneous, stateful.

CloseableChan: a channel with a close operation. 

TODO:  combining barrier.

=======================================================

SynchronisationTesters

Specific testers.  (Class files in synchronisationTester.)  Each tests the
synchronisation objects with a similar name.

ChanTester.scala (binary, stateless, heterogeneous)

FilterChanTester.scala (binary, stateless, heterogeneous)

MenWomenTester.scala (binary, stateless, heterogeneous)

ExchangerTester.scala (binary, stateless, homogeneous)

ChanCounterTester.scala (binary, stateful, heterogeneous)

TwoFamiliesTester.scala (binary, stateful, heterogeneous)

OneFamilyTester.scala (binary, stateful, homogenous)

ABCTester.scala (ternary, stateless, heterogeneous)

BarrierTester.scala (n-ary, stateless, homogenous)

TimeoutChannelTester.scala (mixed modes, stateless, heterogeneous)

TimeoutExchangerTester.scala (mixed modes, stateless, homogeneous)

ABCCounterTester.scala (ternary, stateful, heterogeneous)

BarrierCounterTester.scala (n-ary, stateful, homogeneous)

TerminatingQueueTester.scala (mixed modes, stateful, heterogeneous)

CloseableChanTester.scala (mixed modes, stateful, heterogeneous)

Two-step testers: (12)
----------------

ChanCounterTwoStepTester.scala

ChanTwoStepTester.scala

ABCTwoStepTester.scala

ExchangerTwoStepTester.scala

MenWomenTwoStepTester.scala

BarrierTwoStepTester.scala

TimeoutExchangerTwoStepTester.scala	
				
TwoFamiliesTwoStepTester.scala

ResignableBarrierTwoStepTester.scala

TerminatingQueueTwoStepTester.scala

CloseableChannelTwoStepTester.scala

TimeoutChannelTwoStepTester.scala

TO DO: FilterChannel, One Family, Barrier Counter(?)


==================================================================

Experiments:

Experiment.scala: compares times on various correct examples. 

BugFinderExperiment: compares times on various incorrect examples.

BugParametersExperiment


TODO: 

- Extend binary stateless testers to also deal with unary cases, for
  TimeOutChannelTester and TimeoutExchangerTester.

- Experiments: different testers, time against #iterations/#threads.  Maybe
  also #ops against #iterations/#threads

- Experiment: Barrier, time against # threads.