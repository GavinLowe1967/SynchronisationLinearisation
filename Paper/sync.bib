@article{edmonds_1965,
  title =	 {Paths, Trees, and Flowers},
  volume =	 {17},
  DOI =		 {10.4153/CJM-1965-045-4},
  journal =	 {Canadian Journal of Mathematics},
  publisher =	 {Cambridge University Press},
  author =	 {Edmonds, Jack},
  year =	 {1965},
  pages =	 {449–467}
}

@Book{herlihy-shavit,
  author = 	 {Maurice Herlihy and Nir Shavit},
  title = 	 {The Art of Multiprocessor Programming},
  publisher = 	 {Morgan Kaufmann},
  year = 	 2012}


@Article{gavin:syncChan,
  author =	 {Gavin Lowe},
  title =	 {Discovering and correcting a deadlock in a channel
                  implementation},
  journal =	 {Formal Aspects of Computing},
  year =	 2019,
  volume =	 31,
  pages =	 {411--419}
}

@Manual{fdr-manual,
  key = {FDR},
  title = 	 {FDR Manual, release 4.2.7},
  organization = {University of Oxford},
  year = 	 2020,
  note = 	 {\url{https://dl.cocotec.io/fdr/fdr-manual.pdf}}}

@Book{awr:ucs,
  author =       {A. W. Roscoe},
  title =        {Understanding Concurrent Systems},
  publisher =    {Springer},
  year =         2010}
  
@article{fdr3,
  title =	 {{FDR3}: a parallel refinement checker for {CSP}},
  author =	 {Gibson-Robinson, Thomas and Armstrong, Philip and Boulgakov,
                  Alexandre and Roscoe, A. W.},
  journal =	 {International Journal on Software Tools for Technology
                  Transfer},
  year =	 2015
}

@Article{gavin:lin-testing,
  author = 	 {Gavin Lowe},
  title = 	 {Testing for linearizability},
  journal = 	 {Concurrency and Computation: Practice and Experience},
  year = 	 2016,
  volume = 	 29,
  number = 	 14}

@Article{herlihy-wing,
  author = 	 {M. Herlihy and J. M. Wing},
  title = 	 {Linearizability: a correctness condition for concurrent
                  objects},
  journal = 	 {ACM Transactions on Programming Languages and Systems},
  year = 	 1990,
  volume = 	 12,
  number = 	 3,
  pages = 	 {463--492}}

@Article{gibbons-korach,
  author = 	 {P. B. Gibbons and E. Korach},
  title = 	 {Testing shared memories},
  journal = 	 {SIAM Journal of Computing},
  year = 	 1997,
  volume = 	 26,
  number = 	 4,
  pages = 	 {1208--1244}}




@InCollection{Karp1972,
  author =	 "Karp, Richard M.",
  editor =	 "Miller, Raymond E.  and Thatcher, James W.  and Bohlinger,
                  Jean D.",
  title =	 "Reducibility among Combinatorial Problems",
  bookTitle =	 "Complexity of Computer Computations",
  year =	 "1972",
  publisher =	 "Springer US",
  pages =	 "85--103"
}

@Article{faulty-pri-queue,
  author =	 {Hakan Sundell and Philippas Tsigas},
  title =	 {Fast and lock-free concurrent priority queues for
                  multi-thread systems},
  journal =	 {Journal of Parallel and Distributed Computing},
  year =	 2005,
  volume =	 65,
  number =	 5,
  pages =	 {609--627}
}

@Article{ford-fulkerson,
  author = 	 {Ford, Jr., Lestor R. and D. R. Fulkerson},
  title = 	 {Maximal Flow through a Network},
  journal = 	 {Canadian Journal of Mathematics},
  year = 	 1956,
  volume = 	 8,
  pages = 	 {399-404}}


@Article{alting-barrier,
  author =	 {Peter Welch and Neil Brown and James Moores and Kevin
                  Chalmers and Bernhard Sputh},
  title =	 {Alting barriers: synchronisation with choice in {Java} using
                  {JCSP}},
  journal =	 {Concurrency and Computation: Practice and Experience},
  year =	 2010,
  volume =	 22,
  number =	 8
}

@inproceedings{10.1145/1297027.1297033,
author = {Georges, Andy and Buytaert, Dries and Eeckhout, Lieven},
title = {Statistically rigorous java performance evaluation},
year = {2007},
isbn = {9781595937865},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1297027.1297033},
doi = {10.1145/1297027.1297033},
abstract = {Java performance is far from being trivial to benchmark because it is affected by various factors such as the Java application, its input, the virtual machine, the garbage collector, the heap size, etc. In addition, non-determinism at run-time causes the execution time of a Java program to differ from run to run. There are a number of sources of non-determinism such as Just-In-Time (JIT) compilation and optimization in the virtual machine (VM) driven by timer-based method sampling, thread scheduling, garbage collection, and various.There exist a wide variety of Java performance evaluation methodologies usedby researchers and benchmarkers. These methodologies differ from each other in a number of ways. Some report average performance over a number of runs of the same experiment; others report the best or second best performance observed; yet others report the worst. Some iterate the benchmark multiple times within a single VM invocation; others consider multiple VM invocations and iterate a single benchmark execution; yet others consider multiple VM invocations and iterate the benchmark multiple times.This paper shows that prevalent methodologies can be misleading, and can even lead to incorrect conclusions. The reason is that the data analysis is not statistically rigorous. In this paper, we present a survey of existing Java performance evaluation methodologies and discuss the importance of statistically rigorous data analysis for dealing with non-determinism. We advocate approaches to quantify startup as well as steady-state performance, and, in addition, we provide the JavaStats software to automatically obtain performance numbers in a rigorous manner. Although this paper focuses on Java performance evaluation, many of the issues addressed in this paper also apply to other programming languages and systems that build on a managed runtime system.},
booktitle = {Proceedings of the 22nd Annual ACM SIGPLAN Conference on Object-Oriented Programming Systems, Languages and Applications},
pages = {57–76},
numpages = {20},
keywords = {benchmarking, data analysis, java, methodology, statistics},
location = {Montreal, Quebec, Canada},
series = {OOPSLA '07}
}



@InProceedings{GBE2007,
  author = 	 {Georges, Andy and Buytaert, Dries and Eeckhout, Lieven},
  title = 	 {Statistically rigorous {Java} performance evaluation},
  booktitle = {Proceedings of OOPSLA '07},
  year = 	 2007}
